오전수업 -
즉시로딩 : 어떤걸 조회하는 시점에서 즉시로딩을 걸어두면 다른 테이블까지 바로 불러오는 쿼리를 날리는게 즉시로딩
- 여기선 Member를 조회하는 시점에서 Team까지 불러오는 쿼리를 날리는 것이 즉시로딩.

지연로딩 : 어떤걸 조회하는 시점에서 사용하는 시점에 해당하는 테이블만 조회하는 쿼리가 나감
- 여기선 Member를 조회하는 시점에서 Team을 불러오는 쿼리가 안날라가고 Member를 불러오는 쿼리만 나감. Team을 부르는 경우에만 Team을 부르는 쿼리가 나감.

JPA는 Object와 Relation을 어떻게 Mapping 시키냐가 관건이다.
JDBC는 SQL관점이고 ORM은 객체관점이다.
ORM -> Mapping Framework

Postman 설치(Rest API 사용할때 주로 사용)

@SpringBootTest : 스프링 부트 넣고 테스트(이게 없으면 @Autowired 다 실패)

테스트
문제점이 발생햇을때 다시 되돌린다 -> 회복테스트
구조적으로 문제가 없는가 -> 구조테스트

src/test/java에서 테스트 파일을 만든 다음 JUnit으로 실행시켰다.
이게 테스트 하는 방법.

@ResponeBody : 끝나면 몸체로 돌려준다. Ajax가 된다는 것.
@RequiredArgsConstructor : 이 어노테이션을 사용함으로써 생성자를 만들어줄 필요가 없음.

오후수업 -
@Data : Getter, Setter, requiredArgsConstructor, ToString, EqulsandHashCode 를 합쳐놓은 어노테이션
@NotEmpty : 에러잡는용도
CreateMemberRequest가 일단은 값을 받을때 저장될 객체
build.gradle에 
implementation 'org.springframework.boot:spring-boot-starter-validation'
추가 한 다음 본 코드에서 @Valid 등으로 사용한다.

application.yml로 프로퍼티 역할을 잡아준다음 포트번호, 드라이버클래스, 주소, 유저네임, 비밀번호, ddl만들지 보여줄지 등 설정한다음
postman에서 주소값을 잡은다음 JSON형식으로 값을 보내준다.
보내주면 spring을 거쳐서 DB에 저장이된다.

리스트는 줘야하는 값이 없으니 주소만 갖고 바로 send 보낸다
근데 지금 적혀있는 리스트 뽑는건 되게 안좋은 API 다 꼬이는것.
-> Bad Api 주석처리 부분

람다식을 이용해서 data를 갖고와서 던져주는것
-> Good Api부분

Streams? 람다를 활용할 수 있는 기술 중 하나.
stream은 데이터의 흐름이다.
스트림은 생성하기, 가공하기, 결과만들기 세가지의 내용으로 정의가 가능.
생성하기 -> 인스턴스 생성
가공하기 -> 필터링 및 매핑, 등 결과를 뽑기위한 중간작업
결과만들기 -> 결과를 만드는 작업
.stream()을 생성해서 
.map으로 특정조건에 해당하는 값으로 변환하기 위함.
.collect로 결과를 만든다. 스트림의 최종 연산이자 결과를 만들기 위한 작업.
(Collectors.toList())를 사용함으로써 작업한 결과를 List로 반환가능.